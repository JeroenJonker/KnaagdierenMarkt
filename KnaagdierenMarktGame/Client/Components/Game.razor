@using Microsoft.AspNetCore.SignalR.Client
@using KnaagdierenMarktGame.Shared
@using KnaagdierenMarktGame.Client.Classes

@inject GameState gameState
@inject GameConnection gameConnection

@if (IsEndOfGame)
{
    <EndScreen />
}
else if (gameState.CurrentState == Enums.States.ChooseAction)
{
    <ChooseActionScreen/>
}
else if (gameState.CurrentState == Enums.States.Auction || gameState.CurrentState == Enums.States.Auction_Paying)
{
    <Auction />
}
else if (gameState.CurrentState == Enums.States.Trade)
{
    <TradeView />
}

<div class="PlayerOverview-container">
    <h3 class="PlayerOverview-header">@gameState.User.Name $@gameState.User.MoneyCards.Sum()</h3>
    <PlayerAnimalCardsOverview AnimalCards="gameState.User.AnimalCards" />
    @foreach (Player player in gameState.Players)
    {
        if (player.Name != gameState.User.Name)
        {
            <h3 class="PlayerOverview-header">@player.Name</h3>
            <PlayerAnimalCardsOverview AnimalCards="player.AnimalCards" />
        }
    }
</div>

<p>@gameState.RemainingAuctionCards.Count().ToString()</p>

@code
{
    public bool IsEndOfGame => !gameState.Players.Any(player => CanPlayerTradeAnimalCards(player)) && gameState.RemainingAuctionCards.Count() < 1;

    protected override void OnInitialized()
    {
        gameState.OnPropertyChanged += UpdateScreen;
        gameConnection.OnNewGameMessage += HandleMessage;
        base.OnInitialized();
    }

    protected async Task HandleMessage(Message message)
    {
        switch (message.MessageType)
        {
            case MessageType.Auction: gameState.CurrentState = Enums.States.Auction; break;
            case MessageType.Trade: gameState.CurrentState = Enums.States.Trade; break;
            case MessageType.None: gameState.CurrentState = Enums.States.ChooseAction; break;
            case MessageType.NextPlayer: OnNextPlayer(message); break;
        }
        StateHasChanged();
    }

    public void OnNextPlayer(Message message)
    {
        gameState.CurrentPlayer = gameState.Players.Find(player => player.Name == message.Objects[0].ToString());
        //if (!gameState.PlayerOrder.Contains(gameState.CurrentPlayer.Name))
        //{
        //    gameState.PlayerOrder.Add(gameState.CurrentPlayer.Name);
        //}
    }

    public async Task UpdateScreen(object ob) => StateHasChanged();

    public bool CanPlayerTradeAnimalCards(Player player)
    {
        foreach (AnimalCard card in player.AnimalCards)
        {
            // zijn er nog kaarten over die geen kwartet zijn?
            if (player.AnimalCards.Count(animalCard => animalCard.AnimalType == card.AnimalType) < 4)
            {
                return true;
            }
        }
        return false;
    }
}

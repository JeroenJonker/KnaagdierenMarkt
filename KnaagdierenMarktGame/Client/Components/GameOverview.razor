@using KnaagdierenMarktGame.Shared
@using KnaagdierenMarktGame.Shared.Enums
@using KnaagdierenMarktGame.Client.Classes

@inject GameState gameState
@inject PeerConnection peerConnection

@if (gameState.CurrentState == Enums.States.End || IsEndOfGame)
{
    <EndScreen />
}
else if (gameState.CurrentState == Enums.States.ChooseAction)
{
    <ChooseAction />
}
else if (gameState.CurrentState == Enums.States.Auction || gameState.CurrentState == Enums.States.Auction_Paying)
{
    <Auction />
}
else if (gameState.CurrentState == Enums.States.BuyOver)
{
    <BuyOver />
}

<div class="PlayerOverview-container">
    <h3 class="PlayerOverview-header">@gameState.User.Name $@gameState.User.MoneyCards.Sum()</h3>
    <PlayerAnimalCardsOverview AnimalCards="gameState.User.AnimalCards" />
    @foreach (Player player in gameState.Players)
    {
        if (player.Name != gameState.User.Name)
        {
            <h3 class="PlayerOverview-header">@player.Name</h3>
            <PlayerAnimalCardsOverview AnimalCards="player.AnimalCards" />
        }
    }
</div>

@code
{
    public bool IsEndOfGame => (!gameState.Players.Any(player => !HasPlayerOnlyQuartetOfAnimalCards(player)) && gameState.RemainingAuctionCards.Count() < 1) || gameState.Players.Count() < 2;

    protected override void OnInitialized()
    {
        gameState.OnPropertyChanged += UpdateScreen;
        peerConnection.OnNewGameMessage += HandleMessage;
        base.OnInitialized();
    }

    protected async Task HandleMessage(Message message)
    {
        switch (message.MessageType)
        {
            case MessageType.Auction: gameState.CurrentState = Enums.States.Auction; break;
            case MessageType.BuyOver: gameState.CurrentState = Enums.States.BuyOver; break;
            case MessageType.ChooseAction: gameState.CurrentState = Enums.States.ChooseAction; StateHasChanged(); break;
            case MessageType.NextPlayer: OnNextPlayer(message); break;
            case MessageType.GameEnd: gameState.CurrentState = Enums.States.End; break;
        }
        await InvokeAsync(StateHasChanged);
    }

    public void OnNextPlayer(Message message)
    {
        gameState.CurrentPlayer = gameState.Players.Find(player => player.Name == message.Objects[0].ToString());
    }

    public async Task UpdateScreen(object ob) => await InvokeAsync(StateHasChanged);

    public bool HasPlayerOnlyQuartetOfAnimalCards(Player player)
    {
        foreach (AnimalTypes card in player.AnimalCards)
        {
            if (player.AnimalCards.Count(animalCard => animalCard == card) < 4)
            {
                return false;
            }
        }
        return true;
    }
}

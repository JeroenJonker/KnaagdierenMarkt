@using Microsoft.AspNetCore.SignalR.Client
@using KnaagdierenMarktGame.Shared
@using KnaagdierenMarktGame.Client.Classes

@inject GameState gameState
@inject PeerConnection peerConnection

<Header Title="@(IsCurrentPlayerUser ? "Choose an action" : "Waiting till action is chosen")" MainTextType="@(IsCurrentPlayerUser ? "ChooseAction_CurrentPlayer" : "ChooseAction_Others")"
        SmallHeaderText="@(IsCurrentPlayerUser ? "" : gameState.CurrentPlayer.Name)" />

@if (IsCurrentPlayerUser)
{
    <div class="Auction-CurrentPlayerButtons-container">
        @if (gameState.RemainingAuctionCards.Count() > 0)
        {
            <button @onclick="OnAuctionClick">Auction</button>
        }
        @if (CanUserTradeAnimalCards())
        {
            <button @onclick="OnBuyOverClick">Buy over</button>
        } 
    </div>
}

@code
{
    public bool IsCurrentPlayerUser => gameState.CurrentPlayer != null && gameState.User == gameState.CurrentPlayer;

    protected override void OnInitialized()
    {
        gameState.OnPropertyChanged += UpdateScreen;
        base.OnInitialized();
    }

    public async Task UpdateScreen(object ob) => StateHasChanged();

    public async Task OnAuctionClick()
    {
        Message message = new Message() { MessageType = MessageType.Auction, Sender = gameState.User.Name };
        await peerConnection.SendMessageToPeers(message);
    }

    public async Task OnBuyOverClick()
    {
        Message message = new Message() { MessageType = MessageType.Trade, Sender = gameState.User.Name };
        await peerConnection.SendMessageToPeers(message);
    }

    public bool HasUserSameAnimalCard(AnimalCard animalCard) => gameState.User.AnimalCards.Any(animalcard => animalcard.AnimalType == animalCard.AnimalType);

    public bool CanUserTradeAnimalCards() => gameState.Players.Where(player=> player.Name != gameState.User.Name).Any(player => player.AnimalCards.Any(AnimalCard => HasUserSameAnimalCard(AnimalCard)));

}

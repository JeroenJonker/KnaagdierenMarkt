@using Microsoft.AspNetCore.SignalR.Client
@using KnaagdierenMarktGame.Shared
@using KnaagdierenMarktGame.Client.Classes
@inject GameConnection gameConnection
@inject GameState gameState
@using Newtonsoft.Json

@if (string.IsNullOrEmpty(Group.Name))
{
    <div class="form-group">
        <label>
            User:
            <input @bind="UserName" @bind:event="oninput" required />
        </label>
    </div>

    if (!string.IsNullOrEmpty(UserName) && !IsUserNameInUse())
    {
        <div class="form-group">
            <label>
                Group:
                <input @bind="GroupInput" @bind:event="oninput" size="50" />
            </label>
        </div>
        @*<button @onclick="Send" disabled="@(!IsConnected)">Send</button>
            <button @onclick="SendToGroup" disabled="@(!IsConnected)">SendToGroup</button>*@
        <button @onclick="CreateGroup" disabled="@(!CanCreateGroup)">Create group</button>
    }

    <hr>


}
@if (!string.IsNullOrEmpty(UserName))
{
    <ul>
        @foreach (var group in groups)
        {
            <li>
                @group.Name
                @if (Group != null && Group.Name == group.Name)
                {
                    <button @onclick="LeaveGroup">Leave</button>
                    @*<button @onclick="StartGame">Start</button>*@
                }
                else if (string.IsNullOrEmpty(Group.Name) && !IsUserNameInUse())
                {
                    <button @onclick="() => JoinGroup(group)" disabled="@(!CanJoinGroup)">Join</button>
                }

            </li>
            @foreach (string member in group.Members)
            {
                <li>@member</li>
            }
        }
    </ul>
}

@code {
    private List<Group> groups = new List<Group>();
    private Group Group = new Group();
    public string GroupInput { get; set; }
    public string UserName { get; set; }

    protected override void OnInitialized()
    {
        gameConnection.OnNewMessage += HandleMessage;
        base.OnInitialized();
    }

    protected async Task HandleMessage(MessageType messageType, object message)
    {

        if (messageType == MessageType.InitGroups)
        {
            InitGroups(message);
        }
        if (messageType == MessageType.GroupChanged)
        {
            GroupChanged(message);
        }
        if (messageType == MessageType.LeavedGroup)
        {
            LeaveGroup(JsonConvert.DeserializeObject<string>(message.ToString()));
        }
        if (messageType == MessageType.GroupDeleted)
        {
            GroupDeleted(JsonConvert.DeserializeObject<Group>(message.ToString()));
        }
        if (messageType == MessageType.StartGame)
        {
            StartGame(message.ToString());
        }
        StateHasChanged();
    }

    public void StartGame(string startPlayer)
    {
        System.Diagnostics.Debug.WriteLine("GROUPMEMBERS");
        foreach (string groupmember in Group.Members)
        {
            System.Diagnostics.Debug.WriteLine(groupmember);
        }
        gameState.GameSetup(UserName, Group.Members, startPlayer);
        StateHasChanged();
    }

    public bool CanCreateGroup =>
        !string.IsNullOrEmpty(UserName) && !string.IsNullOrEmpty(GroupInput)
        && !groups.Any(group => group.Name.ToLower() == GroupInput.ToLower());

    public bool CanJoinGroup =>
         !string.IsNullOrEmpty(UserName) && string.IsNullOrEmpty(GroupInput);


    async Task CreateGroup()
    {
        Group = new Group() { Name = GroupInput };
        Group.Members.Add(UserName);
        await gameConnection.HubConnection.SendAsync("JoinGroup", Group);
    }

    async Task JoinGroup(Group selectedGroup)
    {
        Group = selectedGroup;
        Group.Members.Add(UserName);
        await gameConnection.HubConnection.SendAsync("JoinGroup", Group);
    }

    async Task LeaveGroup()
    {
        await gameConnection.HubConnection.SendAsync("LeaveGroup", UserName);
        LeaveGroup(UserName);
        Group = null;
        //User.Group = string.Empty;
    }


    public void GroupChanged(object message)
    {
        Group changedGroup = JsonConvert.DeserializeObject<Group>(message.ToString());
        if (groups.FirstOrDefault(group => group.Name == changedGroup.Name) is Group group)
        {
            group.Members = changedGroup.Members;
        }
        //moet beter kunnen...
        if (changedGroup.Name == Group.Name)
        {
            Group.Members = changedGroup.Members;
        }
        else
        {
            groups.Add(changedGroup);
        }
        // change according to the amount of players
        if (changedGroup.Members.Count >= 2)
        {
            GroupDeleted(changedGroup);
        }
    }

    public void LeaveGroup(string leavedUser)
    {
        // betere naamgeving
        Group group = groups.First(groupname => groupname.Members.Contains(leavedUser));
        group.Members.Remove(leavedUser);
    }

    public void GroupDeleted(Group deletedGroup)
    {
        Group group = groups.First(groupname => deletedGroup.Name == groupname.Name);
        groups.Remove(group);
    }

    public bool IsUserNameInUse() => groups.Any(group => group.Members.Any(member => member == UserName));

    public void InitGroups(object message)
    {
        groups = JsonConvert.DeserializeObject<List<Group>>(message.ToString());
    }
}

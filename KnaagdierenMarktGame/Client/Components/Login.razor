@using Microsoft.AspNetCore.SignalR.Client
@using KnaagdierenMarktGame.Shared
@using KnaagdierenMarktGame.Client.Classes
@inject GameConnection gameConnection
@inject GameState gameState
@using Newtonsoft.Json
@using Microsoft.Extensions.Localization
@using KnaagdierenMarktGame.Client.Resources

<h1 class="Component-header">Login</h1>
@if (Group == null)
{
    <div class="form-group AlignTextCenter">
        <label>
            User:
            <input class="clean-input" @bind="UserName" @bind:event="oninput" required placeholder="username" />
        </label>
    </div>

    if (!string.IsNullOrEmpty(UserName) && !IsUserNameInUse())
    {
        <div class="GroupDecision-container">
            <div class="CreateGroup-container form-group">
                <h4>Make a group</h4>
                <input class="clean-input" @bind="GroupInput" @bind:event="oninput" placeholder="groupname" />
                <button @onclick="CreateGroup" disabled="@(!CanCreateGroup)">Create</button>
            </div>
            <div class="JoinGroup-container">
                <h4 class="AlignTextCenter">Join a group</h4>
                @if (groups.Count() == 0)
                {
                    <p>None available</p>
                }
                <ul>
                    @foreach (var group in groups)
                    {
                        <li>
                            @group.Name @group.Members.Count() / 2
                            @if (Group == null && !IsUserNameInUse())
                            {
                                <button @onclick="() => JoinGroup(group)" disabled="@(!CanJoinGroup)">@group.Name @group.Members.Count() / 2</button>
                            }
                        </li>
                    }
                </ul>
            </div>
        </div>
    }
}
@if (Group != null)
{
<div>
    <p>@Group.Name @Group.Members.Count() / 2</p>
    <button @onclick="LeaveGroup">Leave</button>
</div>

}

@code {
    private List<Group> groups = new List<Group>();
    private Group Group = null;
    public string GroupInput { get; set; }
    public string UserName { get; set; }

    protected override void OnInitialized()
    {
        gameConnection.OnNewGameMessage += HandleMessage;
        base.OnInitialized();
    }

    protected async Task HandleMessage(Message message)
    {
        switch (message.MessageType)
        {
            case MessageType.InitGroups: OnInitGroups(message); break;
            case MessageType.NewGroup: OnNewGroup(message); break;
            case MessageType.JoinedGroup: OnJoinedGroup(message); break;
            case MessageType.LeftGroup: OnLeftGroup(message); break;
            case MessageType.GroupDeleted: OnGroupDeleted(message); break;
            case MessageType.StartGame: OnStartGame(message); break;
        }
        StateHasChanged();
    }

    public void OnInitGroups(Message message)
    {
        groups = JsonConvert.DeserializeObject<List<Group>>(message.Objects[0].ToString());
    }

    public void OnNewGroup(Message message)
    {
        Group newGroup = JsonConvert.DeserializeObject<Group>(message.Objects[0].ToString());
        if (newGroup.Members.First() == UserName)
        {
            Group = newGroup;
        }
        groups.Add(newGroup);
    }

    public void OnJoinedGroup(Message message)
    {
        Group changedGroup = JsonConvert.DeserializeObject<Group>(message.Objects[0].ToString());
        if (groups.FirstOrDefault(group => group.Name == changedGroup.Name) is Group group)
        {
            group.Members = changedGroup.Members;
        }
    }

    public void OnLeftGroup(Message message)
    {
        string leftUser = JsonConvert.DeserializeObject<string>(message.Objects[0].ToString());
        RemoveMemberFromGroup(leftUser);
    }

    public void OnGroupDeleted(Message message)
    {
        Group deletedGroup = JsonConvert.DeserializeObject<Group>(message.Objects[0].ToString());
        Group group = groups.First(groupname => deletedGroup.Name == groupname.Name);
        groups.Remove(group);
    }

    public void OnStartGame(Message message)
    {
        string startPlayer = message.Objects[0].ToString();
        //string startPlayer = JsonConvert.DeserializeObject<string>(message.Objects[0].ToString());
        gameState.GameSetup(UserName, Group.Members, startPlayer);
    }

    public void RemoveMemberFromGroup(string username)
    {
        Group group = groups.First(groupname => groupname.Members.Contains(username));
        group.Members.Remove(username);
    }

    public bool CanCreateGroup =>
        !string.IsNullOrEmpty(UserName) && !string.IsNullOrEmpty(GroupInput)
        && !groups.Any(group => group.Name.ToLower() == GroupInput.ToLower());

    public bool CanJoinGroup =>
         !string.IsNullOrEmpty(UserName) && Group == null;


    async Task CreateGroup()
    {
        await gameConnection.HubConnection.SendAsync("CreateGroup", GroupInput, UserName);
    }

    async Task JoinGroup(Group selectedGroup)
    {
        Group = selectedGroup;
        Group.Members.Add(UserName);
        await gameConnection.HubConnection.SendAsync("JoinGroup", Group.Name, UserName);
    }

    async Task LeaveGroup()
    {
        await gameConnection.HubConnection.SendAsync("LeaveGroup", UserName);
        RemoveMemberFromGroup(UserName);
        Group = null;
    }

    public bool IsUserNameInUse() => groups.Any(group => group.Members.Any(member => member == UserName));

}

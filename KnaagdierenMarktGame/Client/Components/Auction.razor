@using Microsoft.AspNetCore.SignalR.Client
@using KnaagdierenMarktGame.Shared
@using KnaagdierenMarktGame.Client.Classes
@using Newtonsoft.Json
@using System.Timers
@inject GameConnection gameConnection
@inject GameState GameState
<h3>Auction</h3>
@if (GameState.CurrentPlayer != null && GameState.User == GameState.CurrentPlayer)
{
    <button @onclick="OnAuctionClick">Auction</button>
    @if (AuctionedAnimalCard != null)
    {
        <button @onclick="BeginCountdown">Begin Countdown</button>
    }
    @if (HighestOffer > 0 && CountdownTimer == 0)
    {
        <button @onclick="OnAcceptOffer">Accept Offer</button>
        @*<button @onclick="OnRightOfSale">Right of Sale</button>*@
    }
}
else if (AuctionedAnimalCard != null && GameState.User != GameState.CurrentPlayer)
{
    <div class="form-group">
        <label>
            Group:
            <input @bind="UserOffer" @bind:event="oninput" size="50" step="10" />
        </label>
    </div>
    <button @onclick="OnMakeOffer" disabled="@(UserOffer <= HighestOffer)">Make offer</button>
}
<p>@TotalAmoutOfMoney</p>
@if (AuctionedAnimalCard != null)
{
    <label>New card</label>
    <p>@AuctionedAnimalCard.AnimalType</p>
    <p>@AuctionedAnimalCard.Value</p>
    <label>Current offer</label>
    <p>@HighestOffer</p>
    if (HighestOfferPlayer != null)
    {
        <p>@HighestOfferPlayer.Name</p>
    }
    <label>Available Time</label>
    <p>@CountdownTimer</p>
    if (ShowMoneySelectors)
    {
        <MoneySelectors MoneyCards="@GameState.User.MoneyCards" @bind-ChosenMoneyCards="ChosenMoneyCards" />
        foreach (KeyValuePair<int, int> a in ChosenMoneyCards)
        {
            <p>@a.Key ... @a.Value</p>
        }
        if (MatchesOffer)
        {
            <button @onclick="OnPayOffer">Pay</button>
        }
    }
}


@code {
    public int HighestOffer { get; set; } = 0;

    public bool ShowMoneySelectors { get; set; } = false;

    public bool MatchesOffer => (int)ChosenMoneyCards.Sum(a => (a.Key * a.Value)) >= HighestOffer;

    public int TotalAmoutOfMoney { get => GameState.User.MoneyCards.Aggregate((value, total) => total += value); }

    public List<int> OfferedMoneyCards = new List<int>();

    public int UserOffer { get; set; }

    public Player HighestOfferPlayer { get; set; }

    public List<Player> Disqwalified { get; set; } = new List<Player>();

    public AnimalCard AuctionedAnimalCard { get; set; }

    public Dictionary<int, int> ChosenMoneyCards = new Dictionary<int, int>();

    public int CountdownTimer { get; set; } = 0;

    public Timer Timer { get; set; }

    protected override void OnInitialized()
    {
        gameConnection.OnNewNewMessage += HandleMessage;
        GameState.OnPropertyChanged += UpdateScreen;
        base.OnInitialized();
    }

    public async Task UpdateScreen(object ob) => StateHasChanged();

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    protected async Task HandleMessage(Message message)
    {
        switch (message.MessageType)
        {
            case MessageType.BeginCountdown: StartCountdown(); break;
            case MessageType.MakeAuctionOffer: MakeActionOffer(message); break;
            case MessageType.AcceptAuctionOffer: AcceptOffer(message); break;
            case MessageType.PayOffer: PayOffer(message); break;
            case MessageType.PulledAuctionCard: AuctionedAnimalCard = JsonConvert.DeserializeObject<AnimalCard>(message.Objects[0].ToString()); break;
            case MessageType.NextPlayer: GameState.CurrentPlayer = GameState.Players.First(player => player.Name == message.Objects[0].ToString()); break;
            case MessageType.RightOfSale:  break;
        }
        StateHasChanged();
    }

    public async void BeginCountdown()
    {
        await SendSimpleMessage(MessageType.BeginCountdown);
    }

    public void HandleTimer(object sender, ElapsedEventArgs e)
    {
        CountdownTimer--;
        if (CountdownTimer < 1)
        {
            Timer.Stop();
        }
        StateHasChanged();
    }

    public void MakeActionOffer(Message message)
    {
        int newOffer = JsonConvert.DeserializeObject<int>(message.Objects[0].ToString());
        if (HighestOffer < newOffer)
        {
            HighestOfferPlayer = GameState.Players.First(Player => Player.Name == message.Sender);
            HighestOffer = newOffer;
        }
    }

    public void AcceptOffer(Message message)
    {
        if (HighestOfferPlayer.MoneyCards.Aggregate((value, total) => total += value) >= HighestOffer)
        {
            if (HighestOfferPlayer == GameState.User)
            {
                ShowMoneySelectors = true;
            }
        }
        else
        {
            HighestOffer = 0;
            HighestOfferPlayer = null;
            Disqwalified.Add(HighestOfferPlayer);
            message.Objects.Add(HighestOfferPlayer);
        }
    }

    public void StartCountdown()
    {
        CountdownTimer = 3;
        Timer = new Timer(2000);
        Timer.Elapsed += HandleTimer;
        Timer.Start();
    }

    public void PayOffer(Message message)
    {
        List<int> payment = JsonConvert.DeserializeObject<List<int>>(message.Objects[0].ToString());

        GameState.CurrentPlayer.MoneyCards.AddRange(payment);
        if (GameState.CurrentPlayer == GameState.User) { GameState.User = GameState.CurrentPlayer; System.Diagnostics.Debug.WriteLine(GameState.User.Name + " is CurrentPlayer"); }
        System.Diagnostics.Debug.WriteLine(TotalAmoutOfMoney + " amount of money");

        Player winningPlayer = GameState.Players.First(player => player.Name == message.Sender);
        winningPlayer.MoneyCards = SubtractListFromList(winningPlayer.MoneyCards, payment);
        //winningPlayer.MoneyCards = winningPlayer.MoneyCards.Except(payment).ToList();
        winningPlayer.AnimalCards.Add(AuctionedAnimalCard);
        if (winningPlayer == GameState.User) { GameState.User = winningPlayer; System.Diagnostics.Debug.WriteLine(GameState.User.Name + " is winningPlayer"); }
        System.Diagnostics.Debug.WriteLine(TotalAmoutOfMoney + " amount of money");

        AuctionedAnimalCard = null;
        HighestOffer = 0;
        HighestOfferPlayer = null;
        ShowMoneySelectors = false;
        ChosenMoneyCards.Clear();

        if (GameState.CurrentPlayer.Name == GameState.User.Name)
        {
            NextPlayer();
        }
    }

    public List<int> SubtractListFromList (List<int> listA, List<int> listB)
    {
        foreach (int number in listB)
        {
            if (listA.Contains(number))
            {
                listA.Remove(number);
            }
        }
        return listA;
    }

    public async Task OnAuctionClick()
    {
        Random random = new Random();
        AuctionedAnimalCard = GameState.RemainingAuctionCards[random.Next(GameState.RemainingAuctionCards.Count())];
        GameState.RemainingAuctionCards.Remove(AuctionedAnimalCard);
        HighestOffer = 0;
        Message message = new Message() { MessageType = MessageType.PulledAuctionCard, Sender = GameState.User.Name };
        message.Objects.Add(AuctionedAnimalCard);
        await gameConnection.HubConnection.SendAsync("SendMessage", message);
    }

    public async Task OnCountdownClick()
    {
        await SendSimpleMessage(MessageType.BeginCountdown);
    }

    public async Task OnMakeOffer()
    {
        Message message = new Message() { MessageType = MessageType.MakeAuctionOffer, Sender = GameState.User.Name };
        message.Objects.Add(UserOffer);
        await gameConnection.HubConnection.SendAsync("SendMessage", message);
    }

    public async Task OnAcceptOffer()
    {
        if (HighestOfferPlayer.MoneyCards.Aggregate((value, total) => total += value) >= HighestOffer)
        {
            await SendSimpleMessage(MessageType.AcceptAuctionOffer);
        }
        else
        {
            HighestOffer = 0;
            Disqwalified.Add(HighestOfferPlayer);
            Message message = new Message() { MessageType = MessageType.FailedOffer, Sender = GameState.User.Name };
            message.Objects.Add(HighestOfferPlayer);
            await gameConnection.HubConnection.SendAsync("SendMessage", message);
        }
    }

    public async Task OnRightOfSale(Player player, List<int> moneyCards)
    {
        await SendMoneyCards(MessageType.RightOfSale, moneyCards);
    }

    public async Task OnPayOffer()
    {
        OfferedMoneyCards = new List<int>();
        foreach (KeyValuePair<int, int> money in ChosenMoneyCards)
        {
            for (int x = 0; x < money.Value; x++)
            {
                OfferedMoneyCards.Add(money.Key);
            }
        }
        await SendMoneyCards(MessageType.PayOffer, OfferedMoneyCards);
    }

    public async Task SendMoneyCards(MessageType messageType, List<int> moneyCards)
    {
        //GameState.User.MoneyCards = GameState.User.MoneyCards.Except(moneyCards).ToList();
        Message message = new Message() { MessageType = messageType, Sender = GameState.User.Name };
        message.Objects.Add(moneyCards);
        await gameConnection.HubConnection.SendAsync("SendMessage", message);
    }

    public async Task SendSimpleMessage(MessageType messageType)
    {
        Message message = new Message() { MessageType = messageType, Sender = GameState.User.Name };
        await gameConnection.HubConnection.SendAsync("SendMessage", message);
    }

    public async Task NextPlayer()
    {
        Message message = new Message() { MessageType = MessageType.NextPlayer, Sender = GameState.User.Name };
        if (GameState.Players.Any(player => !GameState.PlayerOrder.Contains(player.Name)))
        {
            List<Player> NotChosenPlayers = GameState.Players.Where(player => !GameState.PlayerOrder.Contains(player.Name)).ToList();
            Random random = new Random();
            Player chosenPlayer = NotChosenPlayers[random.Next(0, NotChosenPlayers.Count())];
            message.Objects.Add(chosenPlayer.Name);
        }
        else
        {
            int index = GameState.PlayerOrder.FindIndex(player => player == GameState.CurrentPlayer.Name);
            message.Objects.Add(GameState.PlayerOrder[index == GameState.PlayerOrder.Count() - 1 ? 0 : index]);

        }
        await gameConnection.HubConnection.SendAsync("SendMessage", message);
    }
}

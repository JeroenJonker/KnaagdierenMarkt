@using Microsoft.AspNetCore.SignalR.Client
@using KnaagdierenMarktGame.Shared
@using KnaagdierenMarktGame.Client.Classes
@using Newtonsoft.Json
@using System.Timers
@inject GameConnection gameConnection
@inject GameState gameState
@implements IDisposable

<div class="Component-header">
    <h1>Auction</h1>
    @if (CountdownTimer == -1 || (CountdownTimer == 0 && HighestOffer == 0))
    {
        <h5>Free bidding</h5>
        <p>No timer set</p>
    }
    else if (CountdownTimer > -1)
    {
        <h5>Remaining time</h5>
        <p>@CountdownTimer seconds</p>
    }
</div>
@if (AuctionedAnimalCard != null)
{
    <div class="Auction-container">
        <div class="Auction-item">
            <h2 class="Auction-header">Biddings:</h2>
            @if (HighestOffer == 0)
            {
                <p>$ 0</p>
            }
            else
            {
                <p>$ @HighestOffer @HighestOfferPlayer.Name</p>
                @for (int x = 1; x < Offerings.Count() && x < 6; x++)
                {
                    <p>@Offerings[x]</p>
                }
            }
            @if (gameState.User != gameState.CurrentPlayer && CountdownTimer != 0)
            {
                <input class="clean-input" @bind="UserOffer" @bind:event="oninput" size="50" step="10" />
                <button @onclick="OnMakeOffer" disabled="@(UserOffer <= HighestOffer)">Make offer</button>
            }
        </div>
        <div class="Auction-item">
            <h2 class="Auction-header">@AuctionedAnimalCard.AnimalType</h2>
            <h5>@AuctionedAnimalCard.Value</h5>
            <img class="Auctioned-AnimalCard" src=@($"/Images/{AuctionedAnimalCard.AnimalType}.png") />
        </div>
    </div>
    if (ShowMoneySelectors)
    {
        <MoneySelectors MoneyCards="@gameState.User.MoneyCards" @bind-ChosenMoneyCards="ChosenMoneyCards" />
        <p>Total amount: @ChosenMoneyCards.Sum(a => (a.Key * a.Value))</p>
        if (MatchesOffer)
        {
            <button @onclick="OnPayOffer">Pay</button>
        }
    }
}

@if (gameState.CurrentPlayer != null && gameState.User == gameState.CurrentPlayer)
{
    <div class="Auction-CurrentPlayerButtons-container">
    @if (AuctionedAnimalCard == null)
    {
        <button @onclick="OnAuctionClick">Auction</button>
    }
    @if (AuctionedAnimalCard != null && (CountdownTimer == -1 || HighestOffer == 0 ))
    {
        <button @onclick="BeginCountdown">Begin Countdown</button>
    }
    @if (HighestOffer > 0 && CountdownTimer == 0 && !ShowMoneySelectors)
    {
        <button @onclick="OnAcceptOffer">Accept Offer</button>
        <button @onclick="OnRightOfSale" disabled="@(TotalAmoutOfMoney < HighestOffer )">Right of Sale</button>
    }
    </div>

}


@code {
    public List<string> Offerings = new List<string>();

    public int HighestOffer { get; set; } = 0;

    public bool ShowMoneySelectors { get; set; } = false;

    public bool MatchesOffer => (int)ChosenMoneyCards.Sum(a => (a.Key * a.Value)) >= HighestOffer;

    public int TotalAmoutOfMoney { get => gameState.User.MoneyCards.Aggregate((value, total) => total += value); }

    public List<int> OfferedMoneyCards = new List<int>();

    public int UserOffer { get; set; }

    public Player HighestOfferPlayer { get; set; }

    public List<Player> Disqwalified { get; set; } = new List<Player>();

    public AnimalCard AuctionedAnimalCard { get; set; }

    public Dictionary<int, int> ChosenMoneyCards = new Dictionary<int, int>();

    public int CountdownTimer { get; set; } = -1;

    public Timer Timer { get; set; }

    protected override void OnInitialized()
    {
        gameConnection.OnNewGameMessage += HandleMessage;
        gameState.OnPropertyChanged += UpdateScreen;
        base.OnInitialized();
    }

    public async Task UpdateScreen(object ob) => StateHasChanged();

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    protected async Task HandleMessage(Message message)
    {
        switch (message.MessageType)
        {
            case MessageType.BeginCountdown: StartCountdown(); break;
            case MessageType.MakeAuctionOffer: MakeActionOffer(message); break;
            case MessageType.AcceptAuctionOffer: AcceptOffer(message); break;
            case MessageType.PayOffer: PayOffer(message); break;
            case MessageType.PulledAuctionCard: await PulledActionCard(message); break;
            case MessageType.FailedOffer: break;
        }
        StateHasChanged();
    }

    public async void BeginCountdown()
    {
        await SendSimpleMessage(MessageType.BeginCountdown);
    }

    public void HandleTimer(object sender, ElapsedEventArgs e)
    {
        CountdownTimer--;
        if (CountdownTimer < 1)
        {
            Timer.Stop();
        }
        StateHasChanged();
    }

    public async Task PulledActionCard(Message message)
    {
        AuctionedAnimalCard = JsonConvert.DeserializeObject<AnimalCard>(message.Objects[0].ToString());
        gameState.RemainingAuctionCards.Remove(AuctionedAnimalCard);
        if (AuctionedAnimalCard.AnimalType == Enums.AnimalTypes.Ezel)
        {
            DunkeyRule();
        }
    }

    public void DunkeyRule()
    {
        switch (AmountOfAnimalTypeCardInOwned(Enums.AnimalTypes.Ezel))
        {
            case 0: AddMoneyCardToAllPlayers(50); break;
            case 1: AddMoneyCardToAllPlayers(100); break;
            case 2: AddMoneyCardToAllPlayers(200); break;
            case 3: AddMoneyCardToAllPlayers(500); break;
        }
    }

    public int AmountOfAnimalTypeCardInOwned(Enums.AnimalTypes animalType) =>
        gameState.Players.Sum(player => player.AnimalCards.Count(animalCard => animalCard.AnimalType == animalType));

    public void AddMoneyCardToAllPlayers(int value)
    {
        foreach (Player player in gameState.Players)
        {
            player.MoneyCards.Add(value);
        }
    }

    public void MakeActionOffer(Message message)
    {
        int newOffer = JsonConvert.DeserializeObject<int>(message.Objects[0].ToString());
        if (HighestOffer < newOffer)
        {
            HighestOfferPlayer = gameState.Players.First(Player => Player.Name == message.Sender);
            HighestOffer = newOffer;
            Offerings.Add($"$ {newOffer} {message.Sender}");
            Offerings = Offerings.OrderByDescending(offerings => int.Parse(offerings.Split(' ')[1].ToString())).ToList();
        }
    }

    public void AcceptOffer(Message message)
    {
        if (HighestOfferPlayer.MoneyCards.Aggregate((value, total) => total += value) >= HighestOffer)
        {
            if (HighestOfferPlayer == gameState.User)
            {
                ShowMoneySelectors = true;
            }
        }
        else
        {
            HighestOffer = 0;
            HighestOfferPlayer = null;
            Disqwalified.Add(HighestOfferPlayer);
            message.Objects.Add(HighestOfferPlayer);
        }
    }

    public void StartCountdown()
    {
        CountdownTimer = 3;
        Timer = new Timer(2000);
        Timer.Elapsed += HandleTimer;
        Timer.Start();
    }

    public void PayOffer(Message message)
    {
        List<int> payment = JsonConvert.DeserializeObject<List<int>>(message.Objects[0].ToString());

        HandleSoldAuctionCard(payment, message.Sender);
        ResetAuction();

        if (gameState.CurrentPlayer.Name == gameState.User.Name)
        {
            gameState.NextPlayer();
        }
        gameState.CurrentState = Enums.States.None;
    }

    public void HandleSoldAuctionCard(List<int> payment, string sender)
    {
        if (sender == gameState.CurrentPlayer.Name)
        {
            UpdatePlayerCards(payment, HighestOfferPlayer, gameState.CurrentPlayer);
        }
        else if (sender == HighestOfferPlayer.Name)
        {
            UpdatePlayerCards(payment, gameState.CurrentPlayer, gameState.Players.First(player => player.Name == sender));
        }
    }

    public void UpdatePlayerCards(List<int> payment, Player moneyReceiver, Player animalcardReceiver)
    {
        moneyReceiver.MoneyCards.AddRange(payment);
        if (moneyReceiver == gameState.User) { gameState.User = moneyReceiver; }

        animalcardReceiver.MoneyCards = SubtractListFromList(animalcardReceiver.MoneyCards, payment);
        animalcardReceiver.AnimalCards.Add(AuctionedAnimalCard);
        if (animalcardReceiver == gameState.User) { gameState.User = animalcardReceiver; }
    }

    //mogelijk niet meer nodig
    public void ResetAuction()
    {
        AuctionedAnimalCard = null;
        HighestOffer = 0;
        HighestOfferPlayer = null;
        ShowMoneySelectors = false;
        ChosenMoneyCards.Clear();
    }

    public List<int> SubtractListFromList(List<int> listA, List<int> listB)
    {
        foreach (int number in listB)
        {
            if (listA.Contains(number))
            {
                listA.Remove(number);
            }
        }
        return listA;
    }

    public async Task OnAuctionClick()
    {
        Random random = new Random();
        AuctionedAnimalCard = gameState.RemainingAuctionCards[random.Next(gameState.RemainingAuctionCards.Count())];
        Message message = new Message() { MessageType = MessageType.PulledAuctionCard, Sender = gameState.User.Name };
        message.Objects.Add(AuctionedAnimalCard);
        await gameConnection.HubConnection.SendAsync("SendMessage", message);
    }

    public async Task OnCountdownClick()
    {
        await SendSimpleMessage(MessageType.BeginCountdown);
    }

    public async Task OnMakeOffer()
    {
        Message message = new Message() { MessageType = MessageType.MakeAuctionOffer, Sender = gameState.User.Name };
        message.Objects.Add(UserOffer);
        await gameConnection.HubConnection.SendAsync("SendMessage", message);
    }

    public async Task OnAcceptOffer()
    {
        if (HighestOfferPlayer.MoneyCards.Aggregate((value, total) => total += value) >= HighestOffer)
        {
            await SendSimpleMessage(MessageType.AcceptAuctionOffer);
        }
        else
        {
            HighestOffer = 0;
            Disqwalified.Add(HighestOfferPlayer);
            Message message = new Message() { MessageType = MessageType.FailedOffer, Sender = gameState.User.Name };
            message.Objects.Add(HighestOfferPlayer);
            await gameConnection.HubConnection.SendAsync("SendMessage", message);
        }
    }

    public void OnRightOfSale()
    {
        ShowMoneySelectors = true;
    }

    public async Task OnPayOffer()
    {
        OfferedMoneyCards = new List<int>();
        foreach (KeyValuePair<int, int> money in ChosenMoneyCards)
        {
            for (int x = 0; x < money.Value; x++)
            {
                OfferedMoneyCards.Add(money.Key);
            }
        }
        await SendMoneyCards(MessageType.PayOffer, OfferedMoneyCards);
    }

    public async Task SendMoneyCards(MessageType messageType, List<int> moneyCards)
    {
        Message message = new Message() { MessageType = messageType, Sender = gameState.User.Name };
        message.Objects.Add(moneyCards);
        await gameConnection.HubConnection.SendAsync("SendMessage", message);
    }

    public async Task SendSimpleMessage(MessageType messageType)
    {
        Message message = new Message() { MessageType = messageType, Sender = gameState.User.Name };
        await gameConnection.HubConnection.SendAsync("SendMessage", message);
    }

    public void Dispose()
    {
        gameConnection.OnNewGameMessage -= HandleMessage;
        gameState.OnPropertyChanged -= UpdateScreen;
    }
}
